from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, ReplyKeyboardRemove, FSInputFile
from aiogram.fsm.context import FSMContext
import os
import random

from fsm.general_states import GeneralStatesGroup
import db.users_table_usage as usersdb
import db.members_table_usage as membersdb
import db.groups_table_usage as groupsdb
import db.queues_info_table_usage as queues_info_db
import db.queues_table_usage as queuesdb
import db.trades_table_usage as tradesdb
from utils.status_codes import StatusCode as sc, get_message_about_status_code
from utils.status_codes import get_message_about_error
from utils.general_usage_funcs import (get_image_captcha)
from markups import reply_markups
from utils import decorators

router = Router()
router.message.filter(StateFilter(None))


@router.message(F.text.lower() == 'üêà –º—è—É-–º—è—É')
@router.message(Command('meow'))
async def cmd_meow(message: Message):
    folder_path = 'photos/memes'
    files = os.listdir(folder_path)
    images = [f for f in files if f.endswith(('.jpg', '.jpeg', '.png'))]
    if not images:
        await message.answer('–ú—è—É-–º—è—É')
        return
    random_image = random.choice(images)
    photo_path = os.path.join(folder_path, random_image)
    await message.answer_photo(photo=FSInputFile(photo_path))


@router.message(F.text.lower() == '‚õîÔ∏è –≤—ã—Ö–æ–¥ / –æ—Ç–º–µ–Ω–∞')
@router.message(Command('cancel'))
@decorators.user_exists_required
async def cmd_cancel_no_state(message: Message, state: FSMContext):
    user_data = await state.get_data()
    is_non_stop = user_data.get('non_stop')
    if is_non_stop is not None and is_non_stop == True:
        await message.reply('–Ø –Ω–µ –º–æ–≥—É –æ—Ç–º–µ–Ω–∏—Ç—å. –≠—Ç–æ –Ω–µ—á—Ç–æ –≤–∞–∂–Ω–æ–µ.')
    else:
        await state.clear()
        await message.reply('–¢—ã –ø–æ-–º–æ–µ–º—É –ø–µ—Ä–µ–ø—É—Ç–∞–ª. –¢—É—Ç –Ω–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.\n\n–•–æ—Ç—è... –û—Ç–º–µ–Ω—è—é –ø–µ—Ä–≤—É—é –ø–∞—Ä—É!',
                        reply_markup=await reply_markups.get_main_keyboard())


@router.message(F.text.lower() == '‚óÄÔ∏è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
@router.message(Command('main_menu'))
@decorators.user_exists_required
async def cmd_main_menu(message: Message):
    await message.answer(
        text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤—ã–∑–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ.',
        reply_markup=await reply_markups.get_main_keyboard()
    )


@router.message(F.text.lower() == '¬ÆÔ∏è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
@router.message(Command('start'))
async def cmd_start(message: Message, state: FSMContext) -> None:
    is_user_exist = await usersdb.is_user_exist_(user_id=message.from_user.id)

    quantity_of_total_users = await usersdb.get_quantity_of_total_users_()

    if is_user_exist:
        status_code, nick = await usersdb.get_nick(user_id=message.from_user.id)

        if status_code != sc.OPERATION_SUCCESS:
            output_message = await get_message_about_error(status_code=status_code)

        else:
            output_message = (f'–ü—Ä–∏–≤–µ—Ç, <b>{nick}</b>. '
                              f'–ù–∞—Å —É–∂–µ <b>{quantity_of_total_users}</b>!'
                              f'\n\n–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: /help.')

        await message.answer(
            text=output_message,
            parse_mode='HTML',
            reply_markup=await reply_markups.get_main_keyboard()
        )

    else:
        await state.set_state(GeneralStatesGroup.nick_input)
        await state.update_data(non_stop=True)

        output_message = (f'–Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π. –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: /help.'
                          f'\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è, –Ω–∞—Å —É–∂–µ <b>{quantity_of_total_users}</b>!'
                          f'\n\n–ö–∞–∫ —è –º–æ–≥—É —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å? –¢—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—à—å —Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫ —Å –ø–æ–º–æ—â—å—é /nick.')

        await message.answer(
            text=output_message,
            parse_mode='HTML',
            reply_markup=ReplyKeyboardRemove()
        )


@router.message(F.text.lower() == '‚ö°Ô∏è –∫–æ–º–∞–Ω–¥—ã')
@router.message(Command('help'))
@decorators.user_exists_required
async def cmd_help(message: Message) -> None:
    output_message = (
        '<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>\n'
        '/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —á—Ç–æ-–ª–∏–±–æ\n'
        '/report - –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∞–º (–∂–∞–ª–æ–±—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)\n'
        '/main_menu - –≤—ã–∑–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é\n'
        '/captcha_game - –∏–≥—Ä–∞ –≤ –∫–∞–ø—Ç—á—É\n'
        '\n<b>–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –æ—á–µ—Ä–µ–¥—è–º–∏</b>\n'
        '/queues - –≤—ã–∑–æ–≤ –º–µ–Ω—é –æ—á–µ—Ä–µ–¥–µ–π\n'
        '/reg - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è / –æ—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n'
        '/view - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–≤–æ–∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—á–µ—Ä–µ–¥—è—Ö\n'
        '/trade - –≤—ã–∑–æ–≤ –º–µ–Ω—é —Ç—Ä–µ–π–¥–∞\n'
        '/accept trade_id - –æ–¥–æ–±—Ä–∏—Ç—å —Ç—Ä–µ–π–¥\n'
        '\n<b>–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º</b>\n'
        '/manage_profile - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–±–µ\n'
        '/profile - –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–±–µ\n'
        '/nick - –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è\n'
        '/link - –æ–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–±—è (–ø–æ–¥–≥—Ä—É–∂–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)\n'
        '/subscription - –≤–∫–ª—é—á–µ–Ω–∏–µ / –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n'
        '\n<b>–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –≥—Ä—É–ø–ø–æ–π</b>\n'
        '/join - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ\n'
        '/quit - –≤—ã—Ö–æ–¥ –∏–∑ –≥—Ä—É–ø–ø—ã\n'
        '/members - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Å—Ç–∞–≤ –≥—Ä—É–ø–ø—ã\n'
        '/subgroup - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –Ω–æ–º–µ—Ä–∞ –ø–æ–¥–≥—Ä—É–ø–ø—ã\n'
        '/new_group - —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É\n'
        '/group_info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Å–æ—Å—Ç–æ–∏—à—å\n'
        '\n<b>–õ–∏–¥–µ—Ä—ã –∏ –∑–∞–º—ã –≥—Ä—É–ø–ø—ã</b>\n'
        '/manage_group - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π\n'
        '/manage_members - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n'
        '/manage_queues - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—è–º–∏\n'
        '/key - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–Ω–∏–∫–∞–ª—å–Ω–æ–º –∫–ª—é—á–µ –≥—Ä—É–ø–ø—ã\n'
        '/keygen - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞\n'
        '/source - –ø–æ–¥–≥—Ä—É–∑–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞\n'
        '/hand_made - —Ä—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n'
        '/rename - –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã\n'
        '/del_group - —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã\n'
        ''
    )
    await message.answer(output_message, parse_mode='HTML')


@router.message(F.text.lower() == '‚úèÔ∏è —Å–º–µ–Ω–∏—Ç—å –∏–º—è')
@router.message(Command('nick'))
@decorators.user_exists_required
async def cmd_nick(message: Message, state: FSMContext):
    await state.set_state(GeneralStatesGroup.nick_input)
    await state.update_data(back_step='manage_profile')
    output_message = '–•–æ—Ä–æ—à–µ–Ω—å–∫–æ –ø–æ–¥—É–º–∞–π –Ω–∞–¥ –Ω–∏–∫–æ–º –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤—å –µ–≥–æ –º–Ω–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.'
    await message.answer(output_message, reply_markup=await reply_markups.get_cancel_keyboard())


@router.message(F.text.lower() == 'üí¨ —Ä–µ–ø–æ—Ä—Ç')
@router.message(Command('report'))
@decorators.user_exists_required
async def cmd_report(message: Message, state: FSMContext) -> None:
    await state.set_state(GeneralStatesGroup.captcha)
    await state.update_data(next_state='report_writing')
    captcha_image, captcha_text = await get_image_captcha(6)
    await state.update_data(captcha_text=captcha_text, captcha_try=0)
    await message.answer_photo(
        photo=captcha_image,
        caption='–†–µ—à–∏ –∫–∞–ø—Ç—á—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç.',
        reply_markup=await reply_markups.get_cancel_keyboard()
    )


@router.message(F.text.lower() == 'üë§ –ø—Ä–æ—Ñ–∏–ª—å')
@router.message(Command('manage_profile'))
@decorators.user_exists_required
async def cmd_manage_profile(message: Message) -> None:
    output_message = '–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å–æ —Å–≤–æ–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º.'
    await message.answer(output_message, reply_markup=await reply_markups.get_manage_profile_keyboard())


@router.message(F.text.lower() == 'üßæ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–±–µ')
@router.message(Command('profile'))
@decorators.user_exists_required
async def cmd_profile(message: Message) -> None:
    status_code, info_about_user = await usersdb.get_user_info(message.from_user.id)
    if status_code == sc.OPERATION_SUCCESS:
        output_message = f'<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–±–µ</b>\n\n{info_about_user}'
        await message.answer(
            output_message,
            parse_mode='HTML',
            disable_web_page_preview=True
        )
    else:
        output_message = f'–Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–±–µ: {await get_message_about_status_code(status_code)}.'
        await message.answer(output_message)


@router.message(F.text.lower() == 'üåê –ø–æ–¥–≥—Ä—É–∑–∏—Ç—å —Å—Å—ã–ª–∫—É')
@router.message(Command('link'))
@decorators.user_exists_required
async def cmd_link(message: Message) -> None:
    if message.from_user.username is None:
        output_message = ('–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è –º–æ–≥ –ø–æ–¥–≥—Ä—É–∑–∏—Ç—å —Ç–≤–æ—é —Å—Å—ã–ª–∫—É, <u>—Ç–µ–±–µ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º-–∞–∫–∫–∞—É–Ω—Ç</u>: '
                          '<i>–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ -> –¢—Ä–∏ –ø–∞–ª–∫–∏ (—Å–ª–µ–≤–∞ —Å–≤–µ—Ä—Ö—É) -> –ù–∞—Å—Ç—Ä–æ–π–∫–∏ -> –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º '
                          '—Ç–µ–ª–µ—Ñ–æ–Ω–∞)</i>.')
        await message.answer(
            output_message,
            parse_mode='HTML'
        )
        return
    status_code = await usersdb.update_link_(message.from_user.id, message.from_user.username)
    if status_code == sc.OPERATION_SUCCESS:
        output_message = f'–¢–≤–æ—è —Å—Å—ã–ª–∫–∞ —Ç–µ–ø–µ—Ä—å –≤—ã–≥–ª—è–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º: @{message.from_user.username}.'
        await message.answer(
            output_message
        )
    else:
        output_message = f'–ü—Ä–∏ –ø–æ–¥–≥—Ä—É–∑–∫–µ —Å—Å—ã–ª–∫–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {await get_message_about_status_code(status_code)}.'
        await message.answer(
            output_message
        )


@router.message(F.text.lower() == '‚úèÔ∏è –≤–∫–ª—é—á–µ–Ω–∏–µ / –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
@router.message(Command('subscription'))
@decorators.user_exists_required
async def cmd_subscription(message: Message) -> None:
    status_code = await usersdb.turn_on_off_subscription_(user_id=message.from_user.id)
    if status_code != sc.OPERATION_SUCCESS:
        await message.answer(
            text='–ü—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: '
                 f'{await get_message_about_status_code(status_code)}.'
        )
        return
    status_code, info_about_status_of_news = await usersdb.get_info_about_status_of_news(user_id=message.from_user.id)
    if status_code != sc.OPERATION_SUCCESS:
        await message.answer(
            text='–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: '
                 f'{await get_message_about_status_code(status_code)}.'
        )
        return
    await message.answer(
        text=info_about_status_of_news,
        parse_mode='HTML'
    )

@router.message(F.text.lower() == '‚óÄÔ∏è –≤ –≥—Ä—É–ø–ø—É')
@router.message(F.text.lower() == 'üë• –≥—Ä—É–ø–ø–∞')
@router.message(Command('manage_group'))
@decorators.user_exists_required
async def cmd_manage_group(message: Message) -> None:
    is_in_group = await membersdb.is_user_in_group_(message.from_user.id)
    if not is_in_group:
        output_message = '–¢—ã –Ω–µ –≤ –≥—Ä—É–ø–ø–µ. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å —Å–æ–≤–µ—Ä—à–∏—Ç—å.'
        await message.answer(
            output_message,
            reply_markup=await reply_markups.get_join_or_create_group_keyboard()
        )
    else:
        status_code, user_position = await membersdb.get_user_position_in_group(message.from_user.id)
        if status_code != sc.OPERATION_SUCCESS:
            output_message = (f'–í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ç–≤–æ–µ–≥–æ –º–µ—Å—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ: '
                              f'{get_message_about_status_code(status_code)}.')
            await message.answer(
                output_message,
                reply_markup=await reply_markups.get_main_keyboard()
            )
            return
        if user_position == 'leader':
            output_message = '–¢–≤–æ—è —Ä–æ–ª—å –≤ –≥—Ä—É–ø–ø–µ: <b>–°–æ–∑–¥–∞—Ç–µ–ª—å</b>. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—à—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å.'
            await message.answer(
                output_message,
                parse_mode='HTML',
                reply_markup=await reply_markups.get_manage_group_keyboard(position=user_position)
            )
        elif user_position == 'depute':
            output_message = '–¢–≤–æ—è —Ä–æ–ª—å –≤ –≥—Ä—É–ø–ø–µ: <b>–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å</b>. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—à—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å.'
            await message.answer(
                output_message,
                parse_mode='HTML',
                reply_markup=await reply_markups.get_manage_group_keyboard(position=user_position)
            )
        else:
            output_message = '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—à—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å.'
            await message.answer(
                output_message,
                reply_markup=await reply_markups.get_manage_group_keyboard(position=user_position)
            )


@router.message(F.text.lower() == '‚ûï —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É')
@router.message(Command('new_group'))
@decorators.user_exists_required
@decorators.user_not_in_group_required
async def cmd_new_group(message: Message, state: FSMContext) -> None:
    await message.answer(
        text='–≠—Ç–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –±—É–¥—É—â–µ–º.'
    )
    return
    # await state.set_state(GeneralStatesGroup.group_name_input)
    # output_message = '–ü—Ä–∏–¥—É–º–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏ –Ω–∞–ø–∏—à–∏ –µ–≥–æ –Ω–∏–∂–µ!'
    # await message.answer(
    #     output_message,
    #     reply_markup=await reply_markups.get_cancel_keyboard()
    # )


@router.message(F.text.lower() == '‚úèÔ∏è —Å–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ')
@router.message(Command('rename'))
@decorators.user_exists_required
@decorators.user_in_group_required
@decorators.user_group_leader_required
async def cmd_rename(message: Message, state: FSMContext) -> None:
    await state.set_state(GeneralStatesGroup.group_name_input)
    await state.update_data(back_step='manage_group')
    output_message = '–ü—Ä–∏–¥—É–º–∞–π –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –≥—Ä—É–ø–ø—ã –≤ —Å–≤–æ—ë–º —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.'
    await message.answer(
        output_message,
        reply_markup=await reply_markups.get_cancel_keyboard()
    )


@router.message(F.text.lower() == 'üßæ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ')
@router.message(Command('group_info'))
@decorators.user_exists_required
@decorators.user_in_group_required
async def cmd_group_info(message: Message) -> None:
    status_code, group_id = await membersdb.get_group_id_by_user_id(message.from_user.id)
    if status_code != sc.OPERATION_SUCCESS:
        output_message = (f'–ü—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏, –≤ –∫–∞–∫–æ–π –≥—Ä—É–ø–ø–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: '
                          f'{await get_message_about_status_code(status_code)}.')
        await message.answer(
            output_message
        )
        return
    status_code, info_about_group = await groupsdb.get_group_info(group_id=group_id)
    if status_code != sc.OPERATION_SUCCESS:
        output_message = (f'–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: '
                          f'{await get_message_about_status_code(status_code)}.')
        await message.answer(
            output_message
        )
        return
    output_message = f'<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ</b>\n\n{info_about_group}'
    await message.answer(
        output_message,
        parse_mode='HTML',
        disable_web_page_preview=True
    )


@router.message(F.text.lower() == '‚úèÔ∏è —Å–º–µ–Ω–∏—Ç—å –ø–æ–¥–≥—Ä—É–ø–ø—É')
@router.message(Command('subgroup'))
@decorators.user_exists_required
@decorators.user_in_group_required
async def cmd_subgroup(message: Message, state: FSMContext) -> None:
    await state.set_state(GeneralStatesGroup.subgroup_input)
    await state.update_data(back_step='manage_group')
    output_message = '–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –ø–æ–¥–≥—Ä—É–ø–ø—ã.'
    await message.answer(
        output_message,
        reply_markup=await reply_markups.get_subgroup_keyboard()
    )


@router.message(F.text.lower() == 'üë• –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É')
@router.message(Command('join'))
@decorators.user_exists_required
@decorators.user_not_in_group_required
async def cmd_join(message: Message, state: FSMContext) -> None:
    await state.set_state(GeneralStatesGroup.key_input)
    output_message = ('–í —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –≥—Ä—É–ø–ø—ã.'
                       '\n\n–£–∑–Ω–∞—Ç—å –µ–≥–æ —Ç—ã –º–æ–∂–µ—à—å —É –≥–ª–∞–≤—ã –∏ –∑–∞–º–æ–≤ –≥—Ä—É–ø–ø—ã, –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –≤—Å—Ç—É–ø–∏—Ç—å.')
    await message.answer(
        output_message,
        reply_markup=await reply_markups.get_cancel_keyboard()
    )


@router.message(F.text.lower() == 'üîë –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á')
@router.message(Command('key'))
@decorators.user_exists_required
@decorators.user_in_group_required
@decorators.user_group_leader_or_depute_required
async def cmd_key(message: Message) -> None:
    status_code, group_id = await membersdb.get_group_id_by_user_id(message.from_user.id)
    if status_code != sc.OPERATION_SUCCESS:
        output_message = (f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Å–æ—Å—Ç–æ–∏—à—å: '
                          f'{await get_message_about_status_code(status_code)}.')
        await message.answer(
            output_message
        )
        return
    status_code, key = await groupsdb.get_key_by_group_id(group_id)
    if status_code != sc.OPERATION_SUCCESS:
        output_message = (f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞: '
                          f'{await get_message_about_status_code(status_code)}.')
        await message.answer(
            output_message
        )
        return

    output_message = f'–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –≥—Ä—É–ø–ø—ã: <code>{key}</code>.'
    await message.answer(
        output_message,
        parse_mode='HTML'
    )


@router.message(F.text.lower() == '‚úèÔ∏è —Å–º–µ–Ω–∏—Ç—å –∫–ª—é—á')
@router.message(Command('keygen'))
@decorators.user_exists_required
@decorators.user_in_group_required
@decorators.user_group_leader_or_depute_required
async def cmd_keygen(message: Message) -> None:
    status_code, group_id = await membersdb.get_group_id_by_user_id(message.from_user.id)
    if status_code != sc.OPERATION_SUCCESS:
        output_message = (f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Å–æ—Å—Ç–æ–∏—à—å: '
                          f'{await get_message_about_status_code(status_code)}.')
        await message.answer(
            output_message
        )
        return
    status_code = await groupsdb.gen_new_key_to_group_(group_id)
    if status_code != sc.OPERATION_SUCCESS:
        output_message = (f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞: '
                          f'{await get_message_about_status_code(status_code)}.')
        await message.answer(
            output_message
        )
        return
    status_code, key = await groupsdb.get_key_by_group_id(group_id)
    output_message = f'–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –≥—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω: <code>{key}</code>.'
    await message.answer(
        output_message,
        parse_mode='HTML'
    )


@router.message(F.text.lower() == 'üö™ –≤—ã—Ö–æ–¥ –∏–∑ –≥—Ä—É–ø–ø—ã')
@router.message(Command('quit'))
@decorators.user_exists_required
@decorators.user_in_group_required
@decorators.user_not_group_leader_required
async def cmd_quit(message: Message, state: FSMContext) -> None:
    await state.set_state(GeneralStatesGroup.quit_accepting)
    await message.answer('–¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å –≤—ã–π—Ç–∏ –∏–∑ –≥—Ä—É–ø–ø—ã?',
                         reply_markup=await reply_markups.get_yes_or_no_keyboard())


@router.message(F.text.lower() == '‚ö†Ô∏è —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É')
@router.message(Command('del_group'))
@decorators.user_exists_required
@decorators.user_in_group_required
@decorators.user_group_leader_required
async def cmd_del_group(message: Message, state: FSMContext) -> None:
    await state.set_state(GeneralStatesGroup.del_group_accepting)
    await message.answer(
        '–¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É?',
        reply_markup=await reply_markups.get_yes_or_no_keyboard()
    )


@router.message(F.text.lower() == '‚öôÔ∏è —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏')
@router.message(Command('manage_members'))
@decorators.user_exists_required
@decorators.user_in_group_required
@decorators.user_group_leader_or_depute_required
async def cmd_manage_members(message: Message, state: FSMContext) -> None:
    await message.answer(
        text='–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –ø–æ—Å–ª–µ–¥—É—é—â–µ–º.'
    )
    # status_code, group_id = await membersdb.get_group_id_by_user_id(message.from_user.id)
    # if status_code != sc.OPERATION_SUCCESS:
    #     await message.answer(
    #         text='–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è: '
    #              f'{await get_message_about_status_code(status_code)}.'
    #     )
    #     return
    # status_code, members = await membersdb.get_all_members_of_group(group_id)
    # if status_code != sc.OPERATION_SUCCESS:
    #     await message.answer(
    #         text='–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã: '
    #              f'{await get_message_about_status_code(status_code)}.'
    #     )
    #     return
    # status_code, nicks = await membersdb.get_all_nicks_by_group_id(group_id)
    # if status_code != sc.OPERATION_SUCCESS:
    #     await message.answer(
    #         text='–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –Ω–∏–∫–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã: '
    #              f'{await get_message_about_status_code(status_code)}.'
    #     )
    #     return
    # await state.set_state(GeneralStatesGroup.member_select)
    # prepared_members = await prepare_all_members_info_to_pretty_form(members)
    # prepared_info = await prepare_tuple_info_for_buttons(prepared_members)
    # markups, quantity_of_pages = \
    #     await reply_markups.parse_some_information_to_make_easy_navigation(prepared_info, 2)
    # now_page = 0
    # await state.update_data(
    #     nicks=nicks,
    #     markups=markups,
    #     now_page=now_page,
    #     quantity_of_pages=quantity_of_pages,
    #     back_step='manage_group'
    # )
    # await message.answer(
    #     text='–í—ã–±–µ—Ä–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è —Å–≤–µ—Ä—à–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ –Ω–∏–º.\n\n'
    #          '–¢—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –Ω–∏–∫ –∏–ª–∏ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –ª—é–±–æ–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n'
    #          f'–í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: <b>{now_page + 1}</b>. –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: <b>{quantity_of_pages}</b>.',
    #     parse_mode='HTML',
    #     reply_markup=markups[now_page]
    # )


@router.message(F.text.lower() == '‚óÄÔ∏è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –æ—á–µ—Ä–µ–¥–µ–π')
@router.message(F.text.lower() == '‚öôÔ∏è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π')
@router.message(Command('manage_queues'))
@decorators.user_exists_required
@decorators.user_in_group_required
@decorators.user_group_leader_or_depute_required
async def cmd_manage_queues(message: Message) -> None:
    await message.answer(
        text='–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å.',
        reply_markup=await reply_markups.get_manage_queues_keyboard()
    )


@router.message(F.text.lower() == 'üåê –ø–æ–¥–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
@router.message(Command('source'))
@decorators.user_exists_required
@decorators.user_in_group_required
@decorators.user_group_leader_or_depute_required
async def cmd_source(message: Message, state: FSMContext) -> None:
    await state.set_state(GeneralStatesGroup.source_choose)
    await state.update_data(back_step='manage_queues')
    await message.answer(
        text='–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç.',
        reply_markup=await reply_markups.get_source_keyboard()
    )


@router.message(F.text.lower() == '‚úã —Ä—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞')
@router.message(Command('hand_made'))
@decorators.user_exists_required
@decorators.user_in_group_required
@decorators.user_group_leader_or_depute_required
async def cmd_hand_made(message: Message, state: FSMContext) -> None:
    await message.answer(
        text='–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.',
        reply_markup=await reply_markups.get_hand_made_keyboard()
    )


@router.message(F.text.lower() == '‚óÄÔ∏è –∫ –º–µ–Ω—é –æ—á–µ—Ä–µ–¥–µ–π')
@router.message(F.text.lower() == 'üîó –æ—á–µ—Ä–µ–¥–∏')
@router.message(Command('queues'))
@decorators.user_exists_required
@decorators.user_in_group_required
async def cmd_queues(message: Message) -> None:
    await message.answer(
        text='–î–∞–≤–∞–π-–∫–∞ –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å.',
        reply_markup=await reply_markups.get_queues_menu_keyboard()
    )


@router.message(F.text.lower() == '‚úèÔ∏è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è / –æ—Ç–º–µ–Ω–∞')
@router.message(Command('reg'))
@decorators.user_exists_required
@decorators.user_in_group_required
async def cmd_reg(message: Message, state: FSMContext) -> None:
    status_code, info_about_participate = await queues_info_db.get_information_about_queues_with_user_participation(
        user_id=message.from_user.id
    )
    if status_code != sc.OPERATION_SUCCESS:
        if status_code == sc.NO_QUEUES_TO_PARTICIPATE:
            await message.answer(
                text='–Ø –Ω–µ –Ω–∞—à—ë–ª –Ω–∏ –æ–¥–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã –±—ã –º–æ–≥ –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å!'
            )
        else:
            await message.answer(
                text='–ü—Ä–∏ –ø–æ–¥–≥—Ä—É–∑–∫–µ –æ—á–µ—Ä–µ–¥–µ–π –¥–ª—è —É—á–∞—Å—Ç–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: '
                     f'{await get_message_about_status_code(status_code)}.'
            )
        return
    markups, quantity_of_pages = \
            await reply_markups.parse_some_information_to_make_easy_navigation(info_about_participate, 2)
    now_page = 0
    await state.set_state(GeneralStatesGroup.queue_choose)
    await state.update_data(markups=markups, quantity_of_pages=quantity_of_pages, now_page=now_page,
                            back_step='queues_menu', info_about_participate=info_about_participate)
    await message.answer(
        text='–í—ã–±–µ—Ä–∏ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.',
        reply_markup=markups[now_page]
    )


async def prepare_info_for_managing_queues(message: Message, state: FSMContext, old_page: int = 0):
    output_message = await queuesdb.get_info_about_user_participation_in_queues(user_id=message.from_user.id)

    status_code, queues_info_ids = \
        await queuesdb.simple_get_queues_info_ids_which_user_participate(user_id=message.from_user.id)

    if status_code == sc.USER_NOT_PARTICIPATE_IN_ANY_QUEUES:
        await state.clear()

        await message.answer(
            text=output_message,
            reply_markup=await reply_markups.get_manage_queues_keyboard()
        )
        return sc.STOP

    elif status_code != sc.OPERATION_SUCCESS:
        await state.clear()

        await message.answer(
            text='–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—á–µ—Ä–µ–¥—è—Ö, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã –ø—Ä–∏–Ω–∏–º–∞–µ—à—å —É—á–∞—Å—Ç–∏–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: '
                 f'{await get_message_about_status_code(status_code)}.',
            reply_markup=await reply_markups.get_manage_queues_keyboard()
        )
        return sc.STOP

    info_in_buttons = ['üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö']

    for queue_info_id in queues_info_ids:
        status_code, info_for_button = await queues_info_db.get_information_to_make_button(queue_info_id)
        if status_code != sc.OPERATION_SUCCESS:
            await state.clear()

            await message.answer(
                text='–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—á–µ—Ä–µ–¥—è—Ö, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã –ø—Ä–∏–Ω–∏–º–∞–µ—à—å —É—á–∞—Å—Ç–∏–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: '
                     f'{await get_message_about_status_code(status_code)}.',
                reply_markup=await reply_markups.get_manage_queues_keyboard()
            )
            return sc.STOP

        info_in_buttons.append(info_for_button)

    markups, quantity_of_pages = \
        await reply_markups.parse_some_information_to_make_easy_navigation(tuple(info_in_buttons), 2)

    if old_page > quantity_of_pages:
        now_page = quantity_of_pages - 1
    elif old_page < 0:
        now_page = 0
    else:
        now_page = old_page

    await state.set_state(GeneralStatesGroup.queues_viewing)

    await state.update_data(back_step='queues_menu', markups=markups, quantity_of_pages=quantity_of_pages,
                            now_page=now_page, info_in_buttons=info_in_buttons)

    await message.answer(
        text=output_message,
        parse_mode='HTML',
        reply_markup=markups[now_page]
    )

    return sc.OPERATION_SUCCESS


@router.message(F.text.lower() == 'üìã –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π')
@router.message(Command('view'))
@decorators.user_exists_required
@decorators.user_in_group_required
async def cmd_view(message: Message, state: FSMContext) -> None:
    await prepare_info_for_managing_queues(message, state)


@router.message(F.text.lower() == 'üîÉ –ø–æ–º–µ–Ω—è—Ç—å—Å—è –º–µ—Å—Ç–∞–º–∏')
@router.message(Command('trade'))
@decorators.user_exists_required
@decorators.user_in_group_required
async def cmd_trade(message: Message, state: FSMContext) -> None:
    await state.set_state(GeneralStatesGroup.captcha)
    await state.update_data(next_state='trade_info_input', back_step='queues_menu')
    captcha_image, captcha_text = await get_image_captcha(6)
    await state.update_data(captcha_text=captcha_text, captcha_try=0)
    await message.answer_photo(
        photo=captcha_image,
        caption='–†–µ—à–∏ –∫–∞–ø—Ç—á—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–π–¥.',
        reply_markup=await reply_markups.get_cancel_keyboard()
    )


@router.message(Command('accept'))
@decorators.user_exists_required
@decorators.user_in_group_required
async def cmd_accept(message: Message) -> None:
    split_message = message.text.split(' ')
    if len(split_message) < 2:
        await message.answer(
            text='–ö–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /accept trade_id.'
        )
        return
    try:
        trade_id = split_message[1]
    except ValueError:
        await message.answer(
            text='–í–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç—Ä–µ–π–¥–∞.'
        )
        return
    status_code = await tradesdb.accept_trade_(trade_id=trade_id, accept_sender_id=message.from_user.id)
    if status_code != sc.OPERATION_SUCCESS:
        await message.answer(
            text='–ü—Ä–∏ —Ç—Ä–µ–π–¥–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: '
                 f'{await get_message_about_status_code(status_code)}.'
        )
        return
    await message.answer(
        text='–¢—Ä–µ–π–¥ –æ—Å—É—â–µ—Å—Ç–≤–ª—ë–Ω —É—Å–ø–µ—à–Ω–æ!'
    )


@router.message(F.text.lower() == 'üë• —É—á–∞—Å—Ç–Ω–∏–∫–∏')
@router.message(Command('members'))
@decorators.user_exists_required
@decorators.user_in_group_required
async def cmd_members(message: Message) -> None:
    await message.answer(
        text='–≠—Ç–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–¥–Ω–µ–µ.'
    )
    return


@router.message(F.text.lower() == 'üé≤ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è')
@router.message(Command('games'))
@decorators.user_exists_required
async def cmd_games(message: Message) -> None:
    await message.answer(
        text='–¢–∞–∫, –ø–æ—Å–º–æ—Ç—Ä–∏–º-—Å, –≤–æ —á—Ç–æ —è –º–æ–≥—É —Å —Ç–æ–±–æ–π –ø–æ–∏–≥—Ä–∞—Ç—å...',
        reply_markup=await reply_markups.get_games_keyboard()
    )


@router.message(F.text.lower() == 'üß© –∫–∞–ø—Ç—á–∞')
@router.message(Command('captcha_game'))
@decorators.user_exists_required
async def cmd_captcha_game(message: Message, state: FSMContext) -> None:
    await state.set_state(GeneralStatesGroup.captcha_game_setup)
    await message.answer(
        text='–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∫–∞–ø—Ç—á–µ. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.',
        reply_markup=await reply_markups.get_cancel_keyboard()
    )


@router.message(F.text.lower() == 'ü§° –∞–Ω–µ–∫–¥–æ—Ç')
@router.message(Command('joke'))
@decorators.user_exists_required
async def cmd_joke(message: Message) -> None:
    await message.answer(
        text='–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –ø–æ—Å–ª–µ–¥—É—é—â–µ–º.'
    )


@router.message(F.text.lower() == 'üèÜ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∫–æ—Ä–¥–æ–≤')
@router.message(Command('records'))
@decorators.user_exists_required
async def cmd_records(message: Message) -> None:
    await message.answer(
        text='–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –ø–æ—Å–ª–µ–¥—É—é—â–µ–º.'
    )


@router.message(F.text.lower() == 'üîÑ –∞ —Å–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç?')
async def yes_it_works(message: Message) -> None:
    await message.answer(
        text='–î–∞! –Ø —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞—é!',
        reply_markup=await reply_markups.get_main_keyboard()
    )


@router.message(F.text)
@decorators.user_exists_required
async def unknown_message(message: Message) -> None:
    await message.answer(
        text='–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª.\n\n–ü–æ–ø—Ä–æ–±—É–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –º–µ–Ω—é: /main_menu'
    )
