from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from math import ceil

async def get_yes_or_no_keyboard(placeholder: str = '–õ—é–±–∏—à—å –ø–µ–ª—å–º–µ—à–∫–∏?') -> ReplyKeyboardMarkup:
    kb = [
        [
            KeyboardButton(text='–î–∞'),
            KeyboardButton(text='–ù–µ—Ç')
         ],
    ]
    keyboard = ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder=placeholder
    )
    return keyboard


async def build_markup(content: tuple, adjust_param: int) -> ReplyKeyboardMarkup:
    content = [str(element) for element in content]
    builder = ReplyKeyboardBuilder()
    for element in content:
        builder.add(KeyboardButton(text=element))
    builder.adjust(adjust_param)
    keyboard = builder.as_markup(resize_keyboard=True)
    return keyboard


async def parse_some_information_to_make_easy_navigation(content: tuple, adjust_param: int) -> tuple:
    quantity_of_rows = 10
    len_of_information = len(content)
    quantity_of_getting_rows: float = len_of_information / adjust_param
    quantity_of_pages: float = quantity_of_getting_rows / quantity_of_rows
    quantity_of_pages: int = ceil(quantity_of_pages)
    list_of_markups = []
    for i in range(quantity_of_pages):
        piece_of_content_to_make_markup = []
        start_index = i * quantity_of_rows * adjust_param
        end_index = min(start_index + quantity_of_rows * adjust_param, len_of_information)
        piece_of_content_to_make_markup.extend(content[start_index:end_index])
        if i < quantity_of_pages - 1:
            if i == 0:
                piece_of_content_to_make_markup.append('‚ñ∂Ô∏è –í–ø–µ—Ä—ë–¥')
            else:
                piece_of_content_to_make_markup.append('‚ñ∂Ô∏è –í–ø–µ—Ä—ë–¥')
                piece_of_content_to_make_markup.append('‚óÄÔ∏è –ù–∞–∑–∞–¥')
        elif quantity_of_pages != 1:
            piece_of_content_to_make_markup.append('‚óÄÔ∏è –ù–∞–∑–∞–¥')
        piece_of_content_to_make_markup.append('‚õîÔ∏è –í—ã—Ö–æ–¥ / –æ—Ç–º–µ–Ω–∞')
        markup = await build_markup(tuple(piece_of_content_to_make_markup), adjust_param)
        list_of_markups.append(markup)
    return tuple(list_of_markups), quantity_of_pages


async def get_main_keyboard(placeholder: str = '–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É') -> ReplyKeyboardMarkup:
    kb = [
        [
            KeyboardButton(text='üë§ –ü—Ä–æ—Ñ–∏–ª—å'),
            KeyboardButton(text='üë• –ì—Ä—É–ø–ø–∞')
        ],
        [
            KeyboardButton(text='üîó –û—á–µ—Ä–µ–¥–∏')
        ],
        [
            KeyboardButton(text='‚ö°Ô∏è –ö–æ–º–∞–Ω–¥—ã'),
            KeyboardButton(text='üí¨ –†–µ–ø–æ—Ä—Ç')
        ],
        [
            KeyboardButton(text='üé≤ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è')
        ]
    ]
    keyboard = ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder=placeholder
    )
    return keyboard


async def get_join_or_create_group_keyboard(placeholder: str = '–ß—Ç–æ —Ç—ã –≤—ã–±–µ—Ä–µ—à—å –∏—Ö '
                                                               '–∏–ª–∏ –Ω–∞—Å? –ù–∞—Å –∏–ª–∏ –∏—Ö?') -> ReplyKeyboardMarkup:
    kb = [
        [
            KeyboardButton(text='‚ûï –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É'),
            KeyboardButton(text='üë• –í—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É')
        ],
        [
            KeyboardButton(text='‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        ]
    ]
    keyboard = ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder=placeholder
    )
    return keyboard


async def get_cancel_keyboard() -> ReplyKeyboardMarkup:
    kb = [
        [
            KeyboardButton(text='‚õîÔ∏è –í—ã—Ö–æ–¥ / –æ—Ç–º–µ–Ω–∞')
        ]
    ]
    keyboard = ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True
    )
    return keyboard


async def get_manage_profile_keyboard() -> ReplyKeyboardMarkup:
    kb = [
        [
            KeyboardButton(text='üßæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–±–µ')
        ],
        [
            KeyboardButton(text='‚úèÔ∏è –°–º–µ–Ω–∏—Ç—å –∏–º—è')
        ],
        [
            KeyboardButton(text='üåê –ü–æ–¥–≥—Ä—É–∑–∏—Ç—å —Å—Å—ã–ª–∫—É')
        ],
        [
            KeyboardButton(text='‚úèÔ∏è –í–∫–ª—é—á–µ–Ω–∏–µ / –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
        ],
        [
            KeyboardButton(text='‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        ]
    ]
    keyboard = ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True
    )
    return keyboard


async def get_manage_group_keyboard(position: str) -> ReplyKeyboardMarkup:
    kb = [
        [
            KeyboardButton(text='üßæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ'),
            KeyboardButton(text='‚úèÔ∏è –°–º–µ–Ω–∏—Ç—å –ø–æ–¥–≥—Ä—É–ø–ø—É')
        ],
        [
            KeyboardButton(text='üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏')
        ],
        [
            KeyboardButton(text='üö™ –í—ã—Ö–æ–¥ –∏–∑ –≥—Ä—É–ø–ø—ã')
        ],
        [
            KeyboardButton(text='‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        ]
    ]
    if position in ['depute', 'leader']:
        kb_depute_additional = [
            [
                KeyboardButton(text='üîë –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á'),
                KeyboardButton(text='‚úèÔ∏è –°–º–µ–Ω–∏—Ç—å –∫–ª—é—á')
            ],
            [
                KeyboardButton(text='‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏')
            ],
            [
                KeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π')
            ]
        ]
        kb[2:2] = kb_depute_additional
    if position == 'leader':
        kb.pop(5)
        kb_leader_additional = [
            [
                KeyboardButton(text='‚úèÔ∏è –°–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ'),
                KeyboardButton(text='‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É')
            ]
        ]
        kb[5:5] = kb_leader_additional
    keyboard = ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
    )
    return keyboard


async def get_subgroup_keyboard() -> ReplyKeyboardMarkup:
    kb = [
        [
            KeyboardButton(text='1Ô∏è‚É£ –ü–æ–¥–≥—Ä—É–ø–ø–∞'),
            KeyboardButton(text='2Ô∏è‚É£ –ü–æ–¥–≥—Ä—É–ø–ø–∞')
        ],
        [
            KeyboardButton(text='‚õîÔ∏è –í—ã—Ö–æ–¥ / –æ—Ç–º–µ–Ω–∞')
        ]
    ]
    keyboard = ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True
    )
    return keyboard


async def get_manage_members_keyboard(position: str) -> ReplyKeyboardMarkup:
    kb = [
        [
            KeyboardButton(text='üè¥ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ß–°'),
            KeyboardButton(text='üè≥Ô∏è –ü–æ–º–∏–ª–æ–≤–∞–Ω–∏–µ')
        ],
        [
            KeyboardButton(text='‚óÄÔ∏è –ö –≤—ã–±–æ—Ä—É –Ω–∏–∫–∞'),
            KeyboardButton(text='‚õîÔ∏è –í—ã—Ö–æ–¥ / –æ—Ç–º–µ–Ω–∞')
        ]
    ]
    if position == 'leader':
        kb_leader_additional = [
            [
                KeyboardButton(text='üìà –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è'),
                KeyboardButton(text='üìâ –°–Ω—è—Ç–∏–µ –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è')
            ],
            [
                KeyboardButton(text='üëë –ü–µ—Ä–µ–¥–∞—á–∞ –ª–∏–¥–µ—Ä—Å—Ç–≤–∞')
            ]
        ]
        kb[1:1] = kb_leader_additional
    keyboard = ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True
    )
    return keyboard


async def get_register_keyboard() -> ReplyKeyboardMarkup:
    kb = [
        [
            KeyboardButton(text='¬ÆÔ∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'),
            KeyboardButton(text='üêà –ú—è—É-–ú—è—É')
        ]
    ]
    keyboard = ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True
    )
    return keyboard



async def get_manage_queues_keyboard() -> ReplyKeyboardMarkup:
    kb = [
        [
            KeyboardButton(text='üåê –ü–æ–¥–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
        ],
        [
            KeyboardButton(text='‚úã –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞')
        ],
        [
            KeyboardButton(text='‚óÄÔ∏è –í –≥—Ä—É–ø–ø—É')
        ]
    ]
    keyboard = ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True
    )
    return keyboard


async def get_source_keyboard() -> ReplyKeyboardMarkup:
    kb = [
        [
            KeyboardButton(text='BSUIR')
        ],
        [
            KeyboardButton(text='‚õîÔ∏è –í—ã—Ö–æ–¥ / –æ—Ç–º–µ–Ω–∞')
        ]
    ]
    keyboard = ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True
    )
    return keyboard


async def get_hand_made_keyboard() -> ReplyKeyboardMarkup:
    kb = [
        [
            KeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–º–µ—é—â–µ–≥–æ—Å—è –≤ –ë–î —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è')
        ],
        [
            KeyboardButton(text='‚úèÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è')
        ],
        [
            KeyboardButton(text='‚óÄÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –æ—á–µ—Ä–µ–¥–µ–π')
        ]
    ]
    keyboard = ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True
    )
    return keyboard


async def get_queues_menu_keyboard() -> ReplyKeyboardMarkup:
    kb = [
        [
            KeyboardButton(text='‚úèÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è / –æ—Ç–º–µ–Ω–∞')
        ],
        [
            KeyboardButton(text='üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π'),
            KeyboardButton(text='üîÉ –ü–æ–º–µ–Ω—è—Ç—å—Å—è –º–µ—Å—Ç–∞–º–∏')
        ],
        [
            KeyboardButton(text='‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        ]
    ]
    keyboard = ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True
    )
    return keyboard


async def get_manage_report_keyboard() -> ReplyKeyboardMarkup:
    kb = [
        [
            KeyboardButton(text='‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç'),
            KeyboardButton(text='‚úÖ –ü–æ–º–µ—Ç–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º')
        ],
        [
            KeyboardButton(text='‚óÄÔ∏è –ö –≤—ã–±–æ—Ä—É —Ä–µ–ø–æ—Ä—Ç–∞')
        ],
        [
            KeyboardButton(text='‚õîÔ∏è –í—ã—Ö–æ–¥ / –æ—Ç–º–µ–Ω–∞')
        ]
    ]
    keyboard = ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True
    )
    return keyboard


async def get_return_to_manage_report_keyboard() -> ReplyKeyboardMarkup:
    kb = [
        [
            KeyboardButton(text='‚óÄÔ∏è –ö –≤—ã–±–æ—Ä—É –¥–µ–π—Å—Ç–≤–∏—è —Å —Ä–µ–ø–æ—Ä—Ç–æ–º')
        ],
        [
            KeyboardButton(text='‚õîÔ∏è –í—ã—Ö–æ–¥ / –æ—Ç–º–µ–Ω–∞')
        ]
    ]
    keyboard = ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True
    )
    return keyboard


async def get_yes_or_no_for_report_answering() -> ReplyKeyboardMarkup:
    kb = [
        [
            KeyboardButton(text='–î–∞'),
            KeyboardButton(text='–ù–µ—Ç')
        ],
        [
            KeyboardButton(text='‚óÄÔ∏è –ö –≤—ã–±–æ—Ä—É –¥–µ–π—Å—Ç–≤–∏—è —Å —Ä–µ–ø–æ—Ä—Ç–æ–º')
        ],
        [
            KeyboardButton(text='‚õîÔ∏è –í—ã—Ö–æ–¥ / –æ—Ç–º–µ–Ω–∞')
        ]
    ]
    keyboard = ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True
    )
    return keyboard


async def get_games_keyboard() -> ReplyKeyboardMarkup:
    kb = [
        [
            KeyboardButton(text='üß© –ö–∞–ø—Ç—á–∞'),
            KeyboardButton(text='ü§° –ê–Ω–µ–∫–¥–æ—Ç')
        ],
        [
            KeyboardButton(text='‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        ]
    ]
    keyboard = ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True
    )
    return keyboard
